{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5c1d\u8bd5\u642d\u5efa\u9759\u6001\u7f51\u7ad9\uff0cmkdoc\u9879\u76ee\uff0cgithub\u6258\u7ba1\u3002","title":"About"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/","text":"1.cortexM\u5185\u5b58\u7ba1\u7406 \u8fdb\u6765\u5728\u505aRxdma\u6536\u53d1\u65f6\uff0c\u9047\u5230\u4e86\u79cd\u79cd\u7075\u5f02\u73b0\u8c61\uff0c\u5176\u5b9e\u90fd\u662f\u5806\u6808\u6ea2\u51fa\u7684\u9505\uff0c\u8e29\u8fc7\u8fd9\u4e2a\u5751\u540e\uff0c\u672c\u6587\u65e8\u5728\u8bb2\u6e05\u8fd9\u4e2a\u5185\u6838\u5927\u5751\u3002 Ref: (30\u6761\u6d88\u606f) \u6df1\u5165\u7406\u89e3STM32\u5185\u5b58\u7ba1\u7406_\u884c\u7a33\u65b9\u80fd\u8d70\u8fdc\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 (30\u6761\u6d88\u606f) (GCC)STM32\u57fa\u7840\u8be6\u89e3\u4e4b\u5185\u5b58\u5206\u914d_stm32\u5185\u5b58\u5206\u914d_\u6211\u6211\u6211\u53ea\u4f1aprintf\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 32\u4f4d\u5b58\u50a8\u5668\u67b6\u6784 cortexM\u4f5c\u4e3a32\u4f4d\u5904\u7406\u5668\uff0c\u5176\u5bfb\u5740\u7a7a\u95f4\u80fd\u591f\u8fbe\u52304G\uff0c\uff08\u5982\uff0c\u5c06\u5730\u5740\u88c5\u586b\u5982\u5bfb\u5740\u5bc4\u5b58\u5668\uff0c\u5185\u6838\u6309\u7167\u6b64\u5730\u5740\u53bb\u8bbf\u95ee\u6240\u6709\u7684\u5b58\u50a8\u4fe1\u606f\uff1a\u7a0b\u5e8f\u5b58\u50a8\u5668\uff0c\u6570\u636e\u5b58\u50a8\u5668\uff0c\u5916\u8bbe\u5bc4\u5b58\u5668\uff0cetc\uff09 \u5373\uff0c\u6240\u6709\u5177\u5907\u5b58\u50a8\u610f\u4e49\u7684\u4fe1\u606f\uff0c\u5176\u5b58\u50a8\u5730\u5740\u90fd\u5c06\u88ab\u6620\u5c04\u5230\u8fd9\u4e2a4G\u7684\u7ebf\u6027\u7a7a\u95f4\u4e2d\uff0c\u5e03\u5c40\u5982\u4e0b\uff1a CODE\u5c42\uff1a0x00-0x2000 0000 FLASH\uff0cSRAM\uff0c\u6216BOOTLOADER\uff0c\u6839\u636eBOOT\u5f15\u5bfc\u6620\u5c04 SRAM\u5c42\uff1a0x2000+ \u7247\u5185\u5185\u5b58 \u5916\u8bbe\u5c42 : 0x4000+ (\u6839\u636eCMISIS\u6807\u51c6\u4e0b\u7684svd\u6587\u4ef6\uff0c\u5c06\u5916\u8bbe\u5bc4\u5b58\u5668\u5730\u5740\u6620\u5c04\u5230\u8fd9\u91cc) etc STM32_SRAM\u67b6\u6784 cortexM\u5185\u6838\u4e3aSRAM\u9884\u7559\u4e86512MB\u7684\u5bfb\u5740\u7a7a\u95f4\uff0c\u800c\u5b9e\u9645\u5bfb\u5740\u80fd\u529b\u5fc5\u7136\u9996\u5148\u4e0e\u7269\u7406SRAM_SIZE \u5176\u5e03\u5c40\u5982\u4e0b: \u5806\u6ea2\u51fa\uff1a 1. \u6ea2\u51fa\u5230\u6808\uff0c\u82e5\u672a\u88ab\u4f7f\u7528\uff0c\u65e0\u660e\u663e\u540e\u679c\u3002 2.\u6ea2\u51fa\u5230SRAM\u5916\uff0c\u53d1\u751f\u786c\u4ef6\u9519\u8bef\uff0cmcu\u6b7b\u673a \u6808\u6ea2\u51fa\uff1a1.\u6ea2\u51fa\u5230\u5806\uff0c\u82e5\u5df2\u88ab\u4f7f\u7528\uff0c\u6570\u636e\u88ab\u7e82\u6539\u3002 2.\u6ea2\u51fa\u5230\u9759\u6001\u533a\uff1a\u4fee\u6539\u5168\u5c40\u53d8\u91cf\u30023.\u6ea2\u51fa\u5230TEXT\u6bb5\uff1a\u4fee\u6539\u7a0b\u5e8f\u4ee3\u7801\uff0c\u5fc5\u7136\u6b7b\u673a\u3002 (\u4ee5\u4e0a\u7684\u5751\u7b14\u8005\u5168\u90e8\u8e29\u8fc7) C/CPP\u7a0b\u5e8f\u5185\u5b58\u5e03\u5c40 \u6808\u533a\u3001\u5806\u533a\u3001\u5168\u5c40/\u9759\u6001\u5b58\u50a8\u533a\u3001\u5e38\u91cf\u5b58\u50a8\u533a\u3001\u4ee3\u7801\u533a \u3002 \u5176\u4e2d\u53ef\u5206\u4e3a\u4e09\u6bb5\uff1a Text \u6bb5\uff1a\u5b58\u653eCPU\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4 BSS \u6bb5\uff1a( BlockStarted by Symbol ) \u5b58\u653e\u672a\u7ecf\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u201c\u7b26\u53f7\u201d\uff08\u800c\u5728cpp\u4e2d\uff0c\u8fd9\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u4e3a0\uff09 DATA\u6bb5\uff1a \u200b \u9759\u6001\u533a\uff1a\u5b58\u653e\u521d\u59cb\u5316\u540e\u7684\u5168\u5c40\u53d8\u91cf \u200b \u5806/\u6808\u533a\uff1a\u4e4f\u5584\u53ef\u9648 \u7a0b\u5e8f\u7f16\u8bd1\u671f\u5360\u7528\u5185\u5b58\uff1a Code\u5c42 \uff1a\u4ee3\u8868\u6267\u884c\u7684\u4ee3\u7801\uff0c\u7a0b\u5e8f\u4e2d\u6240\u6709\u7684\u51fd\u6570\u90fd\u4f4d\u4e8e\u6b64\u5904\u3002\u5373\u4e0a\u8ff0\u7684text\u6bb5\u3002 RO-data(Read Only)\u5c42\uff1a\u4ee3\u8868\u53ea\u8bfb\u6570\u636e\uff0c\u7a0b\u5e8f\u4e2d\u6240\u5b9a\u4e49\u7684\u5168\u5c40\u5e38\u91cf\u6570\u636e\u548c\u5b57\u7b26\u4e32\u90fd\u4f4d\u4e8e\u6b64\u5904\uff0c\u5982const\u578b\u3002 RW-data(Read Write)\u5c42\uff1a\u4ee3\u8868\u5df2\u521d\u59cb\u5316\u7684\u8bfb\u5199\u6570\u636e\uff0c\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u5e76\u4e14\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u4f4d\u4e8e\u6b64\u5904\u3002 ZI-data(Zero Initialize)\u5c42\uff1a\u4ee3\u8868\u672a\u521d\u59cb\u5316\u7684\u8bfb\u5199\u6570\u636e\uff0c\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u4e86\u4f46\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u4f4d\u4e8e\u6b64\u5904\u3002Keil\u7f16\u8bd1\u5668\u9ed8\u8ba4\u662f\u628a\u4f60\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf\u90fd\u8d4b\u503c\u4e3a\u4f8b0\u3002\u5373\u4e0a\u8ff0\u7684bss\u6bb5\u3002 \u6700\u7ec8\u7684FLASH\uff0cRAM\u5b58\u50a8\u4fe1\u606f\u5982\u4e0b\uff1a Flash = Code + RO Data + RW Data \uff08\u5e38\u91cf\u4e0e\u4ee3\u7801\u4fe1\u606f\u5b58\u50a8\u5230FLASH\u4e2d\uff09 **RAM = RW-data + ZI-data ** \uff08FLASH\u6a21\u5f0f\u4e0b\uff0cRAM\u5b58\u50a8\u8bfb\u5199\u4fe1\u606f\uff0c\u53ea\u8bfb\u4fe1\u606f\u7559FLASH \u800c\u8c03\u8bd5\u6a21\u5f0f\u4e2d\uff0c\u4ee3\u7801\u4fe1\u606f\u4e5f\u4f1a\u88ab\u642c\u8fd0\u5230SRAM\u4e2d\u4ee5\u5355\u6b65\u8c03\u8bd5 ARMgcc\u4ea4\u53c9\u7f16\u8bd1\u4e0b\u7684\u5185\u5b58\u7ba1\u7406 \u6c47\u7f16\u542f\u52a8\u6587\u4ef6\uff1astartup_xx.s \u524d\u8ff0\uff1a\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\uff0c\u6307\u4ee4\u548c\u6570\u636e\u5171\u7528\u5b58\u50a8\u7a7a\u95f4 \u8d1f\u8d23\u521d\u59cb\u5316SP\u5806\u6808\uff08\u7528\u6237\u6808\uff09\uff0c\u521d\u59cb\u5316PC\u6307\u9488(\u6307\u4ee4\u6808)\uff0c\u5206\u914dNVIC\u4e2d\u65ad\u5411\u91cf\u5730\u5740 \u5b9e\u73b0\u65b9\u5f0f\uff1a\u5b9a\u4e49\u5f31\u7b26\u53f7\u7ad9\u4f4d\uff0c\u5f85\u94fe\u63a5\u5668\u5206\u914d\u5b9e\u4f53 1. SP\u521d\u59cb\u5316\uff1adata\u6bb5\u4e0ebss\u6bb5\u5730\u5740\u5206\u914d\uff1a \u58f0\u660e\u4e86\u672a\u521d\u59cb\u5316\u7684\u5f31\u7b26\u53f7 .word\u82e5\u5e72\uff0c\u5728\u94fe\u63a5\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u7b26\u53f7\u5c06\u88ablink\u5411\u5bf9\u5e94\u7684 2.PC\u521d\u59cb\u5316\uff1a\u590d\u4f4d\u6307\u4ee4\u6808-->main\u542f\u52a8\u5f15\u5bfc _estack = ORIGIN(RAM) + LENGTH(RAM) \u5728\u53d1\u751f\u590d\u4f4d\u4e2d\u65ad\u540e\uff0cPC\u6307\u9488\u5c06\u8df3\u8f6c\u5230\u6b64\u5904\uff0c\u6267\u884c\u4ee5\u4e0bC/CPP\u8fd0\u884c\u73af\u5883\u7684\u521d\u59cb\u5316\uff1a \u8bbe\u7f6eSP\u6307\u9488 ldr sp, =_estack \uff08\u6808\u9876\u6307\u9488\u56fa\u5b9a\u4e3a0x2000 +RAM_size\uff09 \u5c06DATA\u6bb5\u6570\u636e\u4eceFLASH\u642c\u8fd0\u5230SRAM\u4e2d(\u5305\u62ec\u5806\u6808\u521d\u59cb\u5316) bss\u6bb5\u586b\u96f6 \u8c03\u7528sys\u7aef\u521d\u59cb\u51fd\u6570 bl SystemInit \u8c03\u7528c\u7684\u9759\u6001\u533a\u6784\u9020\u51fd\u6570 bl __libc_init_array \u8c03\u7528main\u51fd\u6570 bl main 3.NVIC\u4e2d\u65ad\u5411\u91cf\u5206\u914d\uff1a \u4e2d\u65ad\u5411\u91cf\u53d1\u751f\u65f6\uff0cPC\u6808\u4e3a\u538b\u6808\u4fdd\u6301\u73b0\u573a\u6570\u636e\uff0cCPU\u5207\u6362\u81f3\u7279\u6743\u72b6\u6001\uff0c\u7136\u540e\u8c03\u7528\u5b58\u50a8\u5728\u6b64\u5904\u7684\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\uff08\u5f31\u7b26\u53f7\uff0c\u5f85\u94fe\u63a5\uff09\u3002\u6b64\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u5f39\u6808\u9000\u51fa\u540e\uff0cPC\u6808\u5f39\u6808\u6062\u590d\u73b0\u573a\u3002 \u6ce8\u610f\uff0c\u6b64\u5904\u5f31\u7b26\u53f7\u7684override\u5c06\u5728c\u6587\u4ef6\u4e2d\u5b8c\u6210\uff0c\u7f16\u8bd1\u5668\u5bf9\u4e2d\u65ad\u51fd\u6570\u751f\u6210\u7684\u7b26\u53f7\u94fe\u63a5\u5fc5\u987b\u4e0e\u6c47\u7f16\u4e2d\u7684\u5f31\u7b26\u53f7\u5b8c\u5168\u4e00\u81f4 \u2014\u2014\u2014\u4e2d\u65ad\u670d\u52a1\u51fd\u6570IRQ\u5e94\u5728 extern \"C\" {void IRQn(void){}} \u4e2d\u5b8c\u6210\uff0c\u56e0\u4e3acpp\u5177\u6709\u51fd\u6570\u91cd\u8f7d\u7b49\u7279\u6027\uff0ccpp\u7f16\u8bd1\u5668\u751f\u6210\u7684\u7b26\u53f7\u94fe\u63a5\u4e0e\u8868\u8c61\u4e0d\u4e00\u81f4\u3002 Cube\u811a\u672c\u94fe\u63a5\u6587\u4ef6 xx_FLASH/RAM/ld \u6b64\u94fe\u63a5\u811a\u672c\u58f0\u660e\u4e86cpu\u7684\u5b58\u50a8\u8d44\u6e90\u4e0e\u7528\u6237\u8bbe\u7f6e\u7684\u5806\u6808\u5927\u5c0f \u5806\u751f\u957f\u5b9e\u73b0\u5c42system.c_sbrk(size_t incr) @brief: _sbrk() allocates memory to the newlib heap and is used by malloc and others from the C library \u6b64\u51fd\u6570\u8d1f\u8d23\u5806\u7684\u751f\u957f\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5806\u9876\u6307\u9488 __sbrk_heap_end (\u5728\u6c47\u7f16\u5c42\u5206\u914d\u5806\u6808\u65f6\uff0c\u8c03\u7528\u6b64\u51fd\u6570\u6269\u5c55\u5806\u7684\u5927\u5c0f) \u548c\u5806\u5e95\u6307\u9488 &_end ,\u8fd9\u4e00\u6bb5\u5185\u5b58\u533a\u95f4\u5c06\u5206\u914d\u7ed9newlib \u7684api\u4f7f\u7528\uff0c \uff08\u6211\u5728\u94fe\u63a5\u811a\u672c\u4e2d\u8bbe\u5b9a\u4e86 \uff1a _Min_Heap_Size = 0x1000 \uff09 malloc\u4e0efree\u7684\u6d3b\u52a8\u5c06\u9650\u5728 &_end \u5230 __sbrk_heap_end \u8fd9\u4e2a\u533a\u95f4\u3002 \u4ee3\u7801 /** * @brief _sbrk() allocates memory to the newlib heap and is used by malloc * and others from the C library * * @verbatim * ############################################################################ * # .data # .bss # newlib heap # MSP stack # * # # # # Reserved by _Min_Stack_Size # * ############################################################################ * ^-- RAM start ^-- _end _estack, RAM end --^ * @endverbatim * * This implementation starts allocating at the '_end' linker symbol * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack * The implementation considers '_estack' linker symbol to be RAM end * NOTE: If the MSP stack, at any point during execution, grows larger than the * reserved size, please increase the '_Min_Stack_Size'. * * @param incr Memory size * @return Pointer to allocated memory */ void *_sbrk(ptrdiff_t incr) { extern uint8_t _end; /* Symbol defined in the linker script */ extern uint8_t _estack; /* Symbol defined in the linker script */ extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */ const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size; const uint8_t *max_heap = (uint8_t *)stack_limit; uint8_t *prev_heap_end; /* Initialize heap end at first call */ if (NULL == __sbrk_heap_end) { __sbrk_heap_end = &_end; } /* Protect heap from growing into the reserved MSP stack */ if (__sbrk_heap_end + incr > max_heap) { errno = ENOMEM; return (void *)-1; } prev_heap_end = __sbrk_heap_end; __sbrk_heap_end += incr; return (void *)prev_heap_end; } \u5185\u5b58\u5206\u914d\u6848\u4f8b &huart5 :Cube\u521d\u59cb\u5316\u4ee3\u7801\u4e2d\u521b\u9020\u7684\u5168\u5c40\u5916\u8bbe\u53e5\u67c4\uff0c\u4f4d\u4e8ebss\u6bb5 this:\u62f7\u8d1d\u6784\u9020\u4e2d\u7684\u4e34\u65f6\u53f3\u503c\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u4e0a this->puf: \u6784\u9020\u51fd\u6570\u4e2d\u7533\u8bf7\u7684\u5806\u4e0a\u7a7a\u95f4\uff0c\u4f4d\u4e8e\u5806\u4e0a 2.cpu\u8fd0\u4f5c\u6a21\u5f0f ref: RTOS\u7684\u53d1\u5c55(Armv7-M\u7bc7) - \u54d4\u54e9\u54d4\u54e9 (bilibili.com)","title":"-ARM\u5185\u5b58\u6a21\u578b"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#1cortexm","text":"\u8fdb\u6765\u5728\u505aRxdma\u6536\u53d1\u65f6\uff0c\u9047\u5230\u4e86\u79cd\u79cd\u7075\u5f02\u73b0\u8c61\uff0c\u5176\u5b9e\u90fd\u662f\u5806\u6808\u6ea2\u51fa\u7684\u9505\uff0c\u8e29\u8fc7\u8fd9\u4e2a\u5751\u540e\uff0c\u672c\u6587\u65e8\u5728\u8bb2\u6e05\u8fd9\u4e2a\u5185\u6838\u5927\u5751\u3002 Ref: (30\u6761\u6d88\u606f) \u6df1\u5165\u7406\u89e3STM32\u5185\u5b58\u7ba1\u7406_\u884c\u7a33\u65b9\u80fd\u8d70\u8fdc\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 (30\u6761\u6d88\u606f) (GCC)STM32\u57fa\u7840\u8be6\u89e3\u4e4b\u5185\u5b58\u5206\u914d_stm32\u5185\u5b58\u5206\u914d_\u6211\u6211\u6211\u53ea\u4f1aprintf\u7684\u535a\u5ba2-CSDN\u535a\u5ba2","title":"1.cortexM\u5185\u5b58\u7ba1\u7406"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#32","text":"cortexM\u4f5c\u4e3a32\u4f4d\u5904\u7406\u5668\uff0c\u5176\u5bfb\u5740\u7a7a\u95f4\u80fd\u591f\u8fbe\u52304G\uff0c\uff08\u5982\uff0c\u5c06\u5730\u5740\u88c5\u586b\u5982\u5bfb\u5740\u5bc4\u5b58\u5668\uff0c\u5185\u6838\u6309\u7167\u6b64\u5730\u5740\u53bb\u8bbf\u95ee\u6240\u6709\u7684\u5b58\u50a8\u4fe1\u606f\uff1a\u7a0b\u5e8f\u5b58\u50a8\u5668\uff0c\u6570\u636e\u5b58\u50a8\u5668\uff0c\u5916\u8bbe\u5bc4\u5b58\u5668\uff0cetc\uff09 \u5373\uff0c\u6240\u6709\u5177\u5907\u5b58\u50a8\u610f\u4e49\u7684\u4fe1\u606f\uff0c\u5176\u5b58\u50a8\u5730\u5740\u90fd\u5c06\u88ab\u6620\u5c04\u5230\u8fd9\u4e2a4G\u7684\u7ebf\u6027\u7a7a\u95f4\u4e2d\uff0c\u5e03\u5c40\u5982\u4e0b\uff1a CODE\u5c42\uff1a0x00-0x2000 0000 FLASH\uff0cSRAM\uff0c\u6216BOOTLOADER\uff0c\u6839\u636eBOOT\u5f15\u5bfc\u6620\u5c04 SRAM\u5c42\uff1a0x2000+ \u7247\u5185\u5185\u5b58 \u5916\u8bbe\u5c42 : 0x4000+ (\u6839\u636eCMISIS\u6807\u51c6\u4e0b\u7684svd\u6587\u4ef6\uff0c\u5c06\u5916\u8bbe\u5bc4\u5b58\u5668\u5730\u5740\u6620\u5c04\u5230\u8fd9\u91cc) etc","title":"32\u4f4d\u5b58\u50a8\u5668\u67b6\u6784"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#stm32_sram","text":"cortexM\u5185\u6838\u4e3aSRAM\u9884\u7559\u4e86512MB\u7684\u5bfb\u5740\u7a7a\u95f4\uff0c\u800c\u5b9e\u9645\u5bfb\u5740\u80fd\u529b\u5fc5\u7136\u9996\u5148\u4e0e\u7269\u7406SRAM_SIZE \u5176\u5e03\u5c40\u5982\u4e0b: \u5806\u6ea2\u51fa\uff1a 1. \u6ea2\u51fa\u5230\u6808\uff0c\u82e5\u672a\u88ab\u4f7f\u7528\uff0c\u65e0\u660e\u663e\u540e\u679c\u3002 2.\u6ea2\u51fa\u5230SRAM\u5916\uff0c\u53d1\u751f\u786c\u4ef6\u9519\u8bef\uff0cmcu\u6b7b\u673a \u6808\u6ea2\u51fa\uff1a1.\u6ea2\u51fa\u5230\u5806\uff0c\u82e5\u5df2\u88ab\u4f7f\u7528\uff0c\u6570\u636e\u88ab\u7e82\u6539\u3002 2.\u6ea2\u51fa\u5230\u9759\u6001\u533a\uff1a\u4fee\u6539\u5168\u5c40\u53d8\u91cf\u30023.\u6ea2\u51fa\u5230TEXT\u6bb5\uff1a\u4fee\u6539\u7a0b\u5e8f\u4ee3\u7801\uff0c\u5fc5\u7136\u6b7b\u673a\u3002 (\u4ee5\u4e0a\u7684\u5751\u7b14\u8005\u5168\u90e8\u8e29\u8fc7)","title":"STM32_SRAM\u67b6\u6784"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#ccpp","text":"\u6808\u533a\u3001\u5806\u533a\u3001\u5168\u5c40/\u9759\u6001\u5b58\u50a8\u533a\u3001\u5e38\u91cf\u5b58\u50a8\u533a\u3001\u4ee3\u7801\u533a \u3002 \u5176\u4e2d\u53ef\u5206\u4e3a\u4e09\u6bb5\uff1a Text \u6bb5\uff1a\u5b58\u653eCPU\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4 BSS \u6bb5\uff1a( BlockStarted by Symbol ) \u5b58\u653e\u672a\u7ecf\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u201c\u7b26\u53f7\u201d\uff08\u800c\u5728cpp\u4e2d\uff0c\u8fd9\u90fd\u4f1a\u88ab\u521d\u59cb\u5316\u4e3a0\uff09 DATA\u6bb5\uff1a \u200b \u9759\u6001\u533a\uff1a\u5b58\u653e\u521d\u59cb\u5316\u540e\u7684\u5168\u5c40\u53d8\u91cf \u200b \u5806/\u6808\u533a\uff1a\u4e4f\u5584\u53ef\u9648 \u7a0b\u5e8f\u7f16\u8bd1\u671f\u5360\u7528\u5185\u5b58\uff1a Code\u5c42 \uff1a\u4ee3\u8868\u6267\u884c\u7684\u4ee3\u7801\uff0c\u7a0b\u5e8f\u4e2d\u6240\u6709\u7684\u51fd\u6570\u90fd\u4f4d\u4e8e\u6b64\u5904\u3002\u5373\u4e0a\u8ff0\u7684text\u6bb5\u3002 RO-data(Read Only)\u5c42\uff1a\u4ee3\u8868\u53ea\u8bfb\u6570\u636e\uff0c\u7a0b\u5e8f\u4e2d\u6240\u5b9a\u4e49\u7684\u5168\u5c40\u5e38\u91cf\u6570\u636e\u548c\u5b57\u7b26\u4e32\u90fd\u4f4d\u4e8e\u6b64\u5904\uff0c\u5982const\u578b\u3002 RW-data(Read Write)\u5c42\uff1a\u4ee3\u8868\u5df2\u521d\u59cb\u5316\u7684\u8bfb\u5199\u6570\u636e\uff0c\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u5e76\u4e14\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u4f4d\u4e8e\u6b64\u5904\u3002 ZI-data(Zero Initialize)\u5c42\uff1a\u4ee3\u8868\u672a\u521d\u59cb\u5316\u7684\u8bfb\u5199\u6570\u636e\uff0c\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u4e86\u4f46\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u548c\u9759\u6001\u53d8\u91cf\u4f4d\u4e8e\u6b64\u5904\u3002Keil\u7f16\u8bd1\u5668\u9ed8\u8ba4\u662f\u628a\u4f60\u6ca1\u6709\u521d\u59cb\u5316\u7684\u53d8\u91cf\u90fd\u8d4b\u503c\u4e3a\u4f8b0\u3002\u5373\u4e0a\u8ff0\u7684bss\u6bb5\u3002 \u6700\u7ec8\u7684FLASH\uff0cRAM\u5b58\u50a8\u4fe1\u606f\u5982\u4e0b\uff1a Flash = Code + RO Data + RW Data \uff08\u5e38\u91cf\u4e0e\u4ee3\u7801\u4fe1\u606f\u5b58\u50a8\u5230FLASH\u4e2d\uff09 **RAM = RW-data + ZI-data ** \uff08FLASH\u6a21\u5f0f\u4e0b\uff0cRAM\u5b58\u50a8\u8bfb\u5199\u4fe1\u606f\uff0c\u53ea\u8bfb\u4fe1\u606f\u7559FLASH \u800c\u8c03\u8bd5\u6a21\u5f0f\u4e2d\uff0c\u4ee3\u7801\u4fe1\u606f\u4e5f\u4f1a\u88ab\u642c\u8fd0\u5230SRAM\u4e2d\u4ee5\u5355\u6b65\u8c03\u8bd5","title":"C/CPP\u7a0b\u5e8f\u5185\u5b58\u5e03\u5c40"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#armgcc","text":"","title":"ARMgcc\u4ea4\u53c9\u7f16\u8bd1\u4e0b\u7684\u5185\u5b58\u7ba1\u7406"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#startup_xxs","text":"\u524d\u8ff0\uff1a\u51af\u8bfa\u4f9d\u66fc\u67b6\u6784\uff0c\u6307\u4ee4\u548c\u6570\u636e\u5171\u7528\u5b58\u50a8\u7a7a\u95f4 \u8d1f\u8d23\u521d\u59cb\u5316SP\u5806\u6808\uff08\u7528\u6237\u6808\uff09\uff0c\u521d\u59cb\u5316PC\u6307\u9488(\u6307\u4ee4\u6808)\uff0c\u5206\u914dNVIC\u4e2d\u65ad\u5411\u91cf\u5730\u5740 \u5b9e\u73b0\u65b9\u5f0f\uff1a\u5b9a\u4e49\u5f31\u7b26\u53f7\u7ad9\u4f4d\uff0c\u5f85\u94fe\u63a5\u5668\u5206\u914d\u5b9e\u4f53","title":"\u6c47\u7f16\u542f\u52a8\u6587\u4ef6\uff1astartup_xx.s"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#1-spdatabss","text":"\u58f0\u660e\u4e86\u672a\u521d\u59cb\u5316\u7684\u5f31\u7b26\u53f7 .word\u82e5\u5e72\uff0c\u5728\u94fe\u63a5\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u7b26\u53f7\u5c06\u88ablink\u5411\u5bf9\u5e94\u7684","title":"1. SP\u521d\u59cb\u5316\uff1adata\u6bb5\u4e0ebss\u6bb5\u5730\u5740\u5206\u914d\uff1a"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#2pc-main","text":"_estack = ORIGIN(RAM) + LENGTH(RAM) \u5728\u53d1\u751f\u590d\u4f4d\u4e2d\u65ad\u540e\uff0cPC\u6307\u9488\u5c06\u8df3\u8f6c\u5230\u6b64\u5904\uff0c\u6267\u884c\u4ee5\u4e0bC/CPP\u8fd0\u884c\u73af\u5883\u7684\u521d\u59cb\u5316\uff1a \u8bbe\u7f6eSP\u6307\u9488 ldr sp, =_estack \uff08\u6808\u9876\u6307\u9488\u56fa\u5b9a\u4e3a0x2000 +RAM_size\uff09 \u5c06DATA\u6bb5\u6570\u636e\u4eceFLASH\u642c\u8fd0\u5230SRAM\u4e2d(\u5305\u62ec\u5806\u6808\u521d\u59cb\u5316) bss\u6bb5\u586b\u96f6 \u8c03\u7528sys\u7aef\u521d\u59cb\u51fd\u6570 bl SystemInit \u8c03\u7528c\u7684\u9759\u6001\u533a\u6784\u9020\u51fd\u6570 bl __libc_init_array \u8c03\u7528main\u51fd\u6570 bl main","title":"2.PC\u521d\u59cb\u5316\uff1a\u590d\u4f4d\u6307\u4ee4\u6808--&gt;main\u542f\u52a8\u5f15\u5bfc"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#3nvic","text":"\u4e2d\u65ad\u5411\u91cf\u53d1\u751f\u65f6\uff0cPC\u6808\u4e3a\u538b\u6808\u4fdd\u6301\u73b0\u573a\u6570\u636e\uff0cCPU\u5207\u6362\u81f3\u7279\u6743\u72b6\u6001\uff0c\u7136\u540e\u8c03\u7528\u5b58\u50a8\u5728\u6b64\u5904\u7684\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\uff08\u5f31\u7b26\u53f7\uff0c\u5f85\u94fe\u63a5\uff09\u3002\u6b64\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u5f39\u6808\u9000\u51fa\u540e\uff0cPC\u6808\u5f39\u6808\u6062\u590d\u73b0\u573a\u3002 \u6ce8\u610f\uff0c\u6b64\u5904\u5f31\u7b26\u53f7\u7684override\u5c06\u5728c\u6587\u4ef6\u4e2d\u5b8c\u6210\uff0c\u7f16\u8bd1\u5668\u5bf9\u4e2d\u65ad\u51fd\u6570\u751f\u6210\u7684\u7b26\u53f7\u94fe\u63a5\u5fc5\u987b\u4e0e\u6c47\u7f16\u4e2d\u7684\u5f31\u7b26\u53f7\u5b8c\u5168\u4e00\u81f4 \u2014\u2014\u2014\u4e2d\u65ad\u670d\u52a1\u51fd\u6570IRQ\u5e94\u5728 extern \"C\" {void IRQn(void){}} \u4e2d\u5b8c\u6210\uff0c\u56e0\u4e3acpp\u5177\u6709\u51fd\u6570\u91cd\u8f7d\u7b49\u7279\u6027\uff0ccpp\u7f16\u8bd1\u5668\u751f\u6210\u7684\u7b26\u53f7\u94fe\u63a5\u4e0e\u8868\u8c61\u4e0d\u4e00\u81f4\u3002","title":"3.NVIC\u4e2d\u65ad\u5411\u91cf\u5206\u914d\uff1a"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#cube-xx_flashramld","text":"\u6b64\u94fe\u63a5\u811a\u672c\u58f0\u660e\u4e86cpu\u7684\u5b58\u50a8\u8d44\u6e90\u4e0e\u7528\u6237\u8bbe\u7f6e\u7684\u5806\u6808\u5927\u5c0f","title":"Cube\u811a\u672c\u94fe\u63a5\u6587\u4ef6 xx_FLASH/RAM/ld"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#systemc_sbrksize_t-incr","text":"@brief: _sbrk() allocates memory to the newlib heap and is used by malloc and others from the C library \u6b64\u51fd\u6570\u8d1f\u8d23\u5806\u7684\u751f\u957f\uff0c\u7ef4\u62a4\u4e00\u4e2a\u5806\u9876\u6307\u9488 __sbrk_heap_end (\u5728\u6c47\u7f16\u5c42\u5206\u914d\u5806\u6808\u65f6\uff0c\u8c03\u7528\u6b64\u51fd\u6570\u6269\u5c55\u5806\u7684\u5927\u5c0f) \u548c\u5806\u5e95\u6307\u9488 &_end ,\u8fd9\u4e00\u6bb5\u5185\u5b58\u533a\u95f4\u5c06\u5206\u914d\u7ed9newlib \u7684api\u4f7f\u7528\uff0c \uff08\u6211\u5728\u94fe\u63a5\u811a\u672c\u4e2d\u8bbe\u5b9a\u4e86 \uff1a _Min_Heap_Size = 0x1000 \uff09 malloc\u4e0efree\u7684\u6d3b\u52a8\u5c06\u9650\u5728 &_end \u5230 __sbrk_heap_end \u8fd9\u4e2a\u533a\u95f4\u3002 \u4ee3\u7801 /** * @brief _sbrk() allocates memory to the newlib heap and is used by malloc * and others from the C library * * @verbatim * ############################################################################ * # .data # .bss # newlib heap # MSP stack # * # # # # Reserved by _Min_Stack_Size # * ############################################################################ * ^-- RAM start ^-- _end _estack, RAM end --^ * @endverbatim * * This implementation starts allocating at the '_end' linker symbol * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack * The implementation considers '_estack' linker symbol to be RAM end * NOTE: If the MSP stack, at any point during execution, grows larger than the * reserved size, please increase the '_Min_Stack_Size'. * * @param incr Memory size * @return Pointer to allocated memory */ void *_sbrk(ptrdiff_t incr) { extern uint8_t _end; /* Symbol defined in the linker script */ extern uint8_t _estack; /* Symbol defined in the linker script */ extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */ const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size; const uint8_t *max_heap = (uint8_t *)stack_limit; uint8_t *prev_heap_end; /* Initialize heap end at first call */ if (NULL == __sbrk_heap_end) { __sbrk_heap_end = &_end; } /* Protect heap from growing into the reserved MSP stack */ if (__sbrk_heap_end + incr > max_heap) { errno = ENOMEM; return (void *)-1; } prev_heap_end = __sbrk_heap_end; __sbrk_heap_end += incr; return (void *)prev_heap_end; }","title":"\u5806\u751f\u957f\u5b9e\u73b0\u5c42system.c_sbrk(size_t incr)"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#_1","text":"&huart5 :Cube\u521d\u59cb\u5316\u4ee3\u7801\u4e2d\u521b\u9020\u7684\u5168\u5c40\u5916\u8bbe\u53e5\u67c4\uff0c\u4f4d\u4e8ebss\u6bb5 this:\u62f7\u8d1d\u6784\u9020\u4e2d\u7684\u4e34\u65f6\u53f3\u503c\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u4e0a this->puf: \u6784\u9020\u51fd\u6570\u4e2d\u7533\u8bf7\u7684\u5806\u4e0a\u7a7a\u95f4\uff0c\u4f4d\u4e8e\u5806\u4e0a","title":"\u5185\u5b58\u5206\u914d\u6848\u4f8b"},{"location":"CortexM%E5%86%85%E6%A0%B8%E6%9C%AD%E8%AE%B0/#2cpu","text":"ref: RTOS\u7684\u53d1\u5c55(Armv7-M\u7bc7) - \u54d4\u54e9\u54d4\u54e9 (bilibili.com)","title":"2.cpu\u8fd0\u4f5c\u6a21\u5f0f"},{"location":"none/","text":"","title":"-VScode\u73af\u5883\u642d\u5efa"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","text":"Before\uff1amdk\u7684ui\u548c\u7f16\u8f91\u4f53\u9a8c\u5c5e\u5b9e\u8ba9\u4eba\u96be\u4ee5\u63a5\u53d7\uff0c\u800cvs Code + keil\u7684\u89e3\u51b3\u65b9\u6848\u4ecd\u662f\u6ca1\u6709\u89e3\u51b3C\u7684 \u5200\u8015\u706b\u79cd \u5f0f\u7684\u5f00\u53d1\u4f53\u9a8c\u3002 \u5355\u7247\u673a\u5f00\u53d1\u7ecf\u5386\u4e86\u6c47\u7f16\uff0c\u5bc4\u5b58\u5668c51\uff0c\u5e93\u51fd\u6570\u65f6\u4ee3\uff0c\u7b14\u8005\u8fd8\u662f\u89c9\u5f97\u8fd9\u4e9b\u5f00\u53d1\u65b9\u5f0f\u6709\u4e9b \u5200\u8015\u706b\u79cd \uff0c\u4e5f\u6bd4\u8f83\u6d88\u78e8\u5b66\u4e60\u7684\u52a8\u529b\u3002\u751a\u81f3\u4e4e\u7b14\u8005\u89c9\u5f97Arduino\u7684\u7c7bobjective-C \u4e5f\u8fd8\u4e0d\u591f\u65b9\u4fbf\u3002\uff08\u60f3\u7528stl\u634f\uff09 \u4e8e\u662f\u6298\u817e\u534a\u5929\uff0c\u7ec8\u4e8e\u914d\u7f6e\u597d\u4e86\u8fd9\u5957CLION+CubeMx+OpenOcd\uff0c\u73b0\u5206\u4eab\u5b66\u4e60\u8fc7\u7a0b\u3002 \u4ee5cubeMX\u9002\u914d\u7684stm32\u5e73\u53f0\u4e3a\u4f8b\uff0c\u4f7f\u7528Clion \u8fdb\u884c \u57fa\u4e8earmgcc\u8fdb\u884c \u73b0\u4ee3\u7684 \u5d4c\u5165\u5f0f \u5e94\u7528\u5f00\u53d1\u7684\u524d\u7f6e\uff0c\u5728\u6b64\u5e94\u7528EIDE\u6587\u6863\uff1a \u5f53\u7136\u53ea\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u7c97\u7565\u7684\u901a\u8bc6\u5373\u53ef\uff0c\u5d4c\u5165\u5f0f\u5f00\u53d1 \u4e5f\u662f C/C++ \u9879\u76ee \u7684\u6700\u4f73\u5b9e\u8df5\u4e4b\u4e00\uff0c\u5bf9\u4ee5\u4e0b\u6982\u5ff5\uff0c\u53ef\u4ee5\u5728\u5d4c\u5165\u5f0f\u5f00\u53d1\u4e2d\u9047\u5230\u963b\u788d\u65f6\u83b7\u5f97\u66f4\u6df1\u523b\u7684\u8ba4\u77e5\u4e86\u89e3\u3002 \u786e\u4fdd\u60a8\u719f\u6089 c/c++ \u9879\u76ee\u7684\u57fa\u672c\u6784\u5efa\u8fc7\u7a0b \uff1a \u77e5\u9053\u4ec0\u4e48\u662f compiler, toolchain \u77e5\u9053\u4ec0\u4e48\u662f IncludePath, Preprocessor Defines .... \u77e5\u9053\u4ec0\u4e48\u662f linker script, armcc scatter files \u8be6\u7ec6\u914d\u7f6e\u53ef\u53c2\u8003\u5982\u4e0b\u6587\u6863\u3002 Reference\uff1a \u914d\u7f6eCLion\u7528\u4e8eSTM32\u5f00\u53d1\u3010\u4f18\u96c5\u306e\u5d4c\u5165\u5f0f\u5f00\u53d1 ]( \u914d\u7f6eCLion\u7528\u4e8eSTM32\u5f00\u53d1\u3010\u4f18\u96c5\u306e\u5d4c\u5165\u5f0f\u5f00\u53d1\u3011 - \u77e5\u4e4e (zhihu.com) ) Windows\u4e0a\u4f7f\u7528 OpenOCD \u7ed9 STM32 \u4e0b\u8f7d\u7a0b\u5e8f - \u817e\u8baf\u4e91\u5f00\u53d1\u8005\u793e\u533a-\u817e\u8baf\u4e91 (tencent.com) ) \u5728CLion\u4e2d\u5f00\u53d1STM32 - \u77e5\u4e4e (zhihu.com) \u5de5\u5177\u94fe\uff1a CLion + armgcc + Cmake + openOCD CubeMx + HAL \u5de5\u5177\u94fe\u4e0b\u8f7d arm-none-eabi-gcc Windows\u5230\u8fd9\u91cc\u4e0b\u8f7d\uff1a https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads \uff0c\u9009\u62e9ZIP\u538b\u7f29\u5305\u5f62\u5f0f\u7684\uff1a openOCD openocd-org/openocd: Official OpenOCD Read-Only Mirror (no pull requests) (github.com) \u5b98\u65b9GIthub\u5f00\u6e90\u5e93\uff0creleases\u4e2d\u4e0b\u8f7d MinGW 32 \u8bf7\u6ce8\u610f\u533a\u522bMinGW32 \u4e0eMinGW-w64\uff0c\u524d\u8005\u5df2\u7ecf\u505c\u6b62\u7ef4\u62a4\uff0c MinGW 32\u4e0b\u8f7d\u5730\u5740 Download File List - MinGW - Minimalist GNU for Windows - OSDN \u53ef\u4ee5\u53c2\u9605[ \u79d1\u666e]MinGW vs MinGW-W64\u53ca\u5176\u5b83\uff08\u6bd4\u8f83\u6709\u610f\u601d\uff0c\u6765\u81eamingw\u5427\uff09 - findumars - \u535a\u5ba2\u56ed (cnblogs.com) \u7b14\u8005\u5728\u4e0b\u8f7d\u8fd9\u4e2a\u5de5\u5177\u96c6\u65f6\uff0c \u9891\u7e41\u62a5\u9519msys\u4e0b\u8f7d\u5931\u8d25 \u3002\u4e0d\u8fc7\u8fd8\u662f\u53ef\u4ee5\u8fdb\u884c\u5f00\u53d1\uff0c\u5b9e\u9645\u7528\u65f6\u53d1\u73b0\u6709\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u641c\u7d22\u4e0d\u5230\u4e00\u4e9bC++\u5e93\u7684\u8def\u5f84\uff0c\u9700\u8981\u7b14\u8005\u624b\u52a8\u6dfb\u52a0\u641c\u7d22\u8def\u5f84\"armgcc/include\" \u6240\u4ee5\u7b14\u8005\u5bf9\u8fd9\u4e2a\u5de5\u5177\u96c6\u4e0d\u662f\u5f88\u653e\u5fc3\u3002 \u5173\u4e8eMSYS\u7684\u53c2\u9605 \u4f7f\u7528MSYS\u7684\u4e00\u4e9b\u7ecf\u9a8c - \u77e5\u4e4e (zhihu.com) MinGW-w64 \u6839\u636e\u7b14\u8005\u7684\u68c0\u7d22\u7ed3\u679c\uff0cMinGW-w64\u53ef\u5b8c\u5168\u517c\u5bb9MinGW32 \uff08\u6211\u89c9\u5f97\u96be\u8bf4\uff09\u3002\u6545\u9009\u62e9MinGW-w64\u9009\u62e9\u5728\u5b98\u7f51\u4e0b\u8f7dlatest10.0MinGW-w64. \u4e0d\u4f1a\u4ece\u4ece\u6e90\u7801\u7f16\u8bd1 \u6545\u9000\u800c\u9009\u62e9CLION\u5185\u7f6eMINGW\u5de5\u5177\u94fe\uff1a \u5176\u4e2d\uff0cmake\u4e3a C:\\Program Files\\JetBrains\\CLion 2022.2.1\\bin\\mingw\\bin\\mingw32-make.exe \u914d\u7f6e\u4e09\u4e2a\u5de5\u5177\u7684\u73af\u5883\u53d8\u91cf \u914d\u7f6e CLion->\u9879\u76eetool_chain\u914d\u7f6e \u5de5\u5177\u96c6\uff1aCLION-MinGW\uff0c Make \uff1a C:\\Program Files\\JetBrains\\CLion 2022.2.1\\bin\\mingw\\bin\\mingw32-make.exe complier \uff1a arm-none-eabi-gcc/g++ debugger: Clion built-in GDB Clion->\u9879\u76eeCmake\u914d\u7f6e CLion->\u9879\u76eeRun/Debug\u914d\u7f6e debugger\u9009\u7528\u5185\u7f6e\u5373\u53ef\uff0c\u4e0d\u7528armgdb \u6ce8\u610f\u914d\u7f6ecfg\u6587\u4ef6\u3002\u5728\u9879\u76ee\u4e2d\u653e\u5165cfg\u6587\u4ef6\u540e\u4ed6\u4f1a\u81ea\u52a8\u751f\u6210camke\u914d\u7f6e \u9700\u8981\u6dfb\u52a0cmake\u7a0b\u5e8f\u548cOpenOCD\u70e7\u5f55\u5668 openOCD\u4e2d\u201c.cfg\u201d\u7684\u914d\u7f6e \u7b14\u8005\u4f7f\u7528dap\uff0c\u9700\u8981\u81ea\u5df1\u624b\u5199 \"dap.cfg\" \u6ce8\u610f\u8fd9\u4e2a.cfg\u5173\u7cfb\u5230\u9879\u76ee\u7684\u6784\u7b51\u914d\u7f6e\uff0c\u4e0d\u5199\u5165\u8fd9\u4e2a\u6587\u4ef6cmake\u662fbuild\u4e0d\u51fa\u7684 . \u8be6\u89c1ref interface \u6587\u4ef6\u5939\u5b58\u50a8\u4e86\u5404\u79cd\u8c03\u8bd5\u5668\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u62ec cmsis-dap\u3001stlink-v2 \u7b49\u3002 target \u6587\u4ef6\u5939\u5219\u5b58\u50a8\u4e86\u5404\u79cd\u82af\u7247\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982 stm32f1x.cfg \u5c31\u5bf9\u5e94\u7740 STM32F1 \u7cfb\u5217\u3002\u6b63\u70b9\u539f\u5b50\u3001\u91ce\u706b\u7b49\u56fd\u5185\u4f01\u4e1a\u51fa\u54c1\u7684\u5f00\u53d1\u677f\u4e0d\u5c5e\u4e8e\u5b98\u65b9\u5f00\u53d1\u677f\uff0c\u81ea\u7136\u5728 board \u6587\u4ef6\u5939\u4e2d\u4e0d\u4f1a\u6709\u4ed6\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6839\u636e\u81ea\u5df1\u4f7f\u7528\u7684\u8c03\u8bd5\u5668\u548c\u82af\u7247\uff0c\u5199\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u3002 # choose st-link/j-link/dap-link etc. adapter driver cmsis-dap cmsis_dap_backend hid transport select swd # 0x10000 = 64K Flash Size set FLASH_SIZE 0x160000 //\u89c6\u5f00\u53d1\u677f\u7247\u5185flash\u8d44\u6e90\u800c\u5b9a source [find target/stm32f4x.cfg] # download speed = 1MHz adapter speed 1000 // include stdc++ \u5982\u679c\u4f7f\u7528\u7a1a\u6656\u7684MingGW32\uff0c\u9700\u8981\u914d\u7f6e\u8fd9\u4e9b\uff0cCLION\u5185\u7f6e\u7684MINGW64\u4e0d\u7528 \u5c06main\u6587\u4ef6\u6539\u4e3acpp\u540e\u7f00\uff0c\u5728cmakelist\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff1a #include\u76ee\u5f55 include_directories(Core/Inc Drivers/STM32F4xx_HAL_Driver/Inc Drivers/STM32F4xx_HAL_Driver/Inc/Legacy Drivers/CMSIS/Device/ST/STM32F4xx/Include Drivers/CMSIS/Include D:/CubeMX/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include) \u6dfb\u52a0\u4e0aarmgcc\u7684include\u76ee\u5f55 /gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include \u5173\u4e8e\u672ccmakelist\u5404\u6307\u4ee4\u7684\u8bb2\u89e3\uff0c\u53ef\u53c2\u8003\u5b66\u957f\u89c6\u9891\uff1a [ SWJTU-G308] CLion \u914d\u7f6e\u5d4c\u5165\u5f0f\u5f00\u53d1~_\u54d4\u54e9\u54d4\u54e9_bilibili printf\u91cd\u5b9a\u5411 \u53c2\u89c1\u7a1a\u6656\u6587\u7ae0\uff0c\u7b14\u8005\u89c9\u5f97\u8fd8\u633a\u9ebb\u70e6\u7684\uff0c\u9042\u7f62\uff0c~~\u51d1\u5408\u7528HAL\u5e93\u5427~~ \u7b14\u8005\u9009\u62e9\u81ea\u5df1\u642d\u5efa\u4e00\u5957\u57fa\u4e8e\u6cdb\u578b\u7684LOG\u6846\u67b6\u3002 Program \u5982\u4e0b\u53ef\u4ee5\u5f00\u59cb\u4f18\u96c5\u5730\u4f7f\u7528c++\u5f00\u53d1 void test() { std::vector<std::string> vec={\"Hello embedded\\n\",\"Hello clion\\n\",\"Hello c++17\\n\",\"Hello std::vector,string,and object!\"}; for( auto& it:vec) { HAL_UART_Transmit(&huart5,it.c_str(),it.size(),300); } } \u84dd\u7259\u4e32\u53e3\u4fe1\u606f\uff1a \u540e\uff1a\u7b14\u8005\u6709\u6b21\u548c\u8001\u5e08\u804a\u5929\u65f6\uff0c\u5410\u69fd\u5230arduino uno \u5c4f\u853d\u592a\u591a\u5e95\u5c42\u7ec6\u8282\uff0c\u5185\u6838\u5982\u4e2d\u65ad\u7531\u592a\u8fc7\u7b80\u964b\uff0c\u505a\u8bfe\u8bbe\u65f6\u8e29\u5751\u4e0d\u65ad\u3002 \u8001\u5e08\u8bf4\u5982\u679c\u80fd\u752851\u5b9e\u73b0\u4e5f\u662f\u63a5\u53d7\u7684\u3002 \u7b14\u8005\u7981\u4e0d\u4f4f\u5e7d\u5e7d\u5730\u5410\u69fd\u201c\u611f\u89c951\uff0c...\u6709\u70b9\u5200\u8015\u706b\u79cd\u554a\u3002\u3002\u201d \u5982\u4f55\u5e73\u8861\u5e95\u5c42\u548c\u62bd\u8c61\u5462\uff0c\u5728\u5355\u7247\u673a\u5b66\u4e60\u4e2d\u7b14\u8005\u6162\u6162\u5b66\u4f1a\u4e86\u7ffbdatasheet\u3002\u5c01\u88c5\u5982Arduino\uff0c\u8e29\u5751\u540e\u53ef\u4ee5\u7ffbdatasheet\u627e\u5230Solution\u3002\u7b80\u964b\u598251\uff0c\u7b14\u8005\u5bf9\u7740\u5200\u8015\u706b\u79cd\u7684keilIDE\u548cC89\u7684\u8bed\u8a00\u6807\u51c6\uff0c\u59d4\u5b9e\u662f\u6ca1\u6709\u529b\u6c14\u5728\u5bc4\u5b58\u5668\u4e0a\u5200\u8015\u706b\u79cd \u4ece\u6c47\u7f16\u5230c/c++\u5230java c#\u5230python matlab\u3002\u7b14\u8005\u8ba4\u4e3astdc++ \u662f\u6211\u559c\u6b22\u7684\u65b9\u5f0f\u3002\u5728\u719f\u6089\u5e95\u5c42\u5230\u5bc4\u5b58\u5668\u548c\u6c47\u7f16\u7684\u524d\u63d0\u4e0b\uff0c\u7b14\u8005\u5f88\u4e50\u610f\u7528HAL\u5e93\uff0c\u7528\u5bf9\u8c61\uff0c\u7528stl\u53bb\u5b8c\u6210\u4efb\u52a1\u3002 \u73b0\u4ee3\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u5e94\u7528\u573a\u666f\u90fd\u843d\u5b9e\u5230\u6df1\u5ea6\u5b66\u4e60\uff0c\u795e\u7ecf\u7f51\u7edc\uff0ccv\u7684\u90e8\u7f72\u4e0a\u4e86\uff0c\u5728\u5927\u5bb9\u91cf\u8bbe\u5907\u4e0a\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u53ef\u4ee5\u62e5\u62b1\u73b0\u4ee3IDE\u548c\u7f16\u7a0b\u8bed\u8a00\u5462\uff1f\u5173\u4e8e\u8fd0\u884c\u6548\u7387\uff0c\u7b14\u8005\u53ea\u5728\u5d4c\u5165\u5f0f\u4e2d\u542c\u95fb\u8fc7c++\u6548\u7387\u4e0d\u884c\u3002\u4f5c\u4e3a\u4e00\u4e2a\u73a9\u7968\u7684\u5927\u5b66\u751f\uff0c\u6211\u53ef\u4ee5\u53e3\u55e8\u4e00\u53e5embedded C\u8fc7\u65f6\u4e86\u3002 Debug Reference : OpenOCD support | CLion Documentation (jetbrains.com) \u542f\u52a8debug\u540e\uff0c\u5185\u6838\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c\u8bb0\u5f97\u70b9\u51fb\u5de5\u5177\u680f\u4e0a\u7684\u590d\u4f4d\uff0c\u4f7fPC\u8df3\u8f6c\u5230Reset_Handler\u4e0a \uff08\u8be6\u89c1\u672c\u9879\u76ee\u5185\u6838\u672d\u8bb0\uff09 Reference: STM32\u7acb\u65b9\u4f53MX\u9879\u76ee |CLion \u6587\u6863 (jetbrains.com) \u65b0\u5efa\u9879\u76ee\u6b65\u9aa4 1.CLion\u65b0\u5efastm32\u5de5\u7a0b 2.\u6309\u7167ide\u63d0\u793a\u6253\u5f00cubemx\u914d\u7f6e\u521d\u59cb\u5316\u4ee3\u7801 3.\u56de\u5230clion\uff0c\u4e3a\u9879\u76ee\u6dfb\u52a0.cfg\u6587\u4ef6 \uff0c\u5426\u5219\u5c06\u6ca1\u6709\u6784\u5efa\u914d\u7f6e\uff01\uff01\uff01 3.\u8fd0\u884c\u914d\u7f6e\u4e2d\u6dfb\u52a0\"Openocd\u8fd0\u884c\u5e76\u4e0b\u8f7d\"\uff0c\u5e76\u9009\u4e2d\u9762\u677f\u914d\u7f6e\u6587\u4ef6 4.\u914d\u7f6ecmakelist\u6587\u4ef6\uff1a \u5173\u95ed\u4f18\u5316(-g0)\uff0c\u6dfb\u52a0include\u8def\u5f84\uff1a \u4e0d\u5173\uff0c\u4e5f\u884c\uff0c\u61c2\u7f16\u8bd1\u539f\u7406\u7684\u8bdd\u3002 5.Programing\uff0c\u914d\u7f6ecmakelist\u7684file\uff0cinclude_dir 6.debug\uff0c\u9009\u62e9svd\u6587\u4ef6\u4ece\u800c\u76d1\u89c6\u5916\u8bbe \u5173\u4e8esvd\u6587\u4ef6\u7684\u610f\u4e49\uff0c\u8be6\u89c1\u672c\u9879\u76eeCortexM\u5185\u6838\u672d\u8bb0 @ref \uff1asvd2rust\uff1aPAC(\u5916\u8bbe\u8bbf\u95ee\u5c42) Rust\u5d4c\u5165\u5f0f\u5f00\u53d1\u5165\u95e8(02)--Rust\u5d4c\u5165\u5f0f\u793e\u533a\u751f\u6001\u6982\u89c8_\u54d4\u54e9\u54d4\u54e9_bilibili \u5bf9\u5e94\u82af\u7247\u7684svd\u6587\u4ef6\u5728keil\u4e2d\u80fd\u627e\u5230\uff0c\u7528evething\u641c\u7d22\u5373\u53ef","title":"-\u57fa\u4e8eClion\u7684\u5f00\u53d1\u73af\u5883\u642d\u5efa"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_1","text":"","title":"\u5de5\u5177\u94fe\u4e0b\u8f7d"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#arm-none-eabi-gcc","text":"Windows\u5230\u8fd9\u91cc\u4e0b\u8f7d\uff1a https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads \uff0c\u9009\u62e9ZIP\u538b\u7f29\u5305\u5f62\u5f0f\u7684\uff1a","title":"arm-none-eabi-gcc"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#openocd","text":"openocd-org/openocd: Official OpenOCD Read-Only Mirror (no pull requests) (github.com) \u5b98\u65b9GIthub\u5f00\u6e90\u5e93\uff0creleases\u4e2d\u4e0b\u8f7d","title":"openOCD"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#mingw32","text":"\u8bf7\u6ce8\u610f\u533a\u522bMinGW32 \u4e0eMinGW-w64\uff0c\u524d\u8005\u5df2\u7ecf\u505c\u6b62\u7ef4\u62a4\uff0c MinGW 32\u4e0b\u8f7d\u5730\u5740 Download File List - MinGW - Minimalist GNU for Windows - OSDN \u53ef\u4ee5\u53c2\u9605[ \u79d1\u666e]MinGW vs MinGW-W64\u53ca\u5176\u5b83\uff08\u6bd4\u8f83\u6709\u610f\u601d\uff0c\u6765\u81eamingw\u5427\uff09 - findumars - \u535a\u5ba2\u56ed (cnblogs.com) \u7b14\u8005\u5728\u4e0b\u8f7d\u8fd9\u4e2a\u5de5\u5177\u96c6\u65f6\uff0c \u9891\u7e41\u62a5\u9519msys\u4e0b\u8f7d\u5931\u8d25 \u3002\u4e0d\u8fc7\u8fd8\u662f\u53ef\u4ee5\u8fdb\u884c\u5f00\u53d1\uff0c\u5b9e\u9645\u7528\u65f6\u53d1\u73b0\u6709\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u641c\u7d22\u4e0d\u5230\u4e00\u4e9bC++\u5e93\u7684\u8def\u5f84\uff0c\u9700\u8981\u7b14\u8005\u624b\u52a8\u6dfb\u52a0\u641c\u7d22\u8def\u5f84\"armgcc/include\" \u6240\u4ee5\u7b14\u8005\u5bf9\u8fd9\u4e2a\u5de5\u5177\u96c6\u4e0d\u662f\u5f88\u653e\u5fc3\u3002 \u5173\u4e8eMSYS\u7684\u53c2\u9605 \u4f7f\u7528MSYS\u7684\u4e00\u4e9b\u7ecf\u9a8c - \u77e5\u4e4e (zhihu.com)","title":"MinGW32"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#mingw-w64","text":"\u6839\u636e\u7b14\u8005\u7684\u68c0\u7d22\u7ed3\u679c\uff0cMinGW-w64\u53ef\u5b8c\u5168\u517c\u5bb9MinGW32 \uff08\u6211\u89c9\u5f97\u96be\u8bf4\uff09\u3002\u6545\u9009\u62e9MinGW-w64\u9009\u62e9\u5728\u5b98\u7f51\u4e0b\u8f7dlatest10.0MinGW-w64. \u4e0d\u4f1a\u4ece\u4ece\u6e90\u7801\u7f16\u8bd1 \u6545\u9000\u800c\u9009\u62e9CLION\u5185\u7f6eMINGW\u5de5\u5177\u94fe\uff1a \u5176\u4e2d\uff0cmake\u4e3a C:\\Program Files\\JetBrains\\CLion 2022.2.1\\bin\\mingw\\bin\\mingw32-make.exe \u914d\u7f6e\u4e09\u4e2a\u5de5\u5177\u7684\u73af\u5883\u53d8\u91cf","title":"MinGW-w64"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_2","text":"","title":"\u914d\u7f6e"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#clion-tool_chain","text":"\u5de5\u5177\u96c6\uff1aCLION-MinGW\uff0c Make \uff1a C:\\Program Files\\JetBrains\\CLion 2022.2.1\\bin\\mingw\\bin\\mingw32-make.exe complier \uff1a arm-none-eabi-gcc/g++ debugger: Clion built-in GDB","title":"CLion-&gt;\u9879\u76eetool_chain\u914d\u7f6e"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#clion-cmake","text":"","title":"Clion-&gt;\u9879\u76eeCmake\u914d\u7f6e"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#clion-rundebug","text":"debugger\u9009\u7528\u5185\u7f6e\u5373\u53ef\uff0c\u4e0d\u7528armgdb \u6ce8\u610f\u914d\u7f6ecfg\u6587\u4ef6\u3002\u5728\u9879\u76ee\u4e2d\u653e\u5165cfg\u6587\u4ef6\u540e\u4ed6\u4f1a\u81ea\u52a8\u751f\u6210camke\u914d\u7f6e \u9700\u8981\u6dfb\u52a0cmake\u7a0b\u5e8f\u548cOpenOCD\u70e7\u5f55\u5668","title":"CLion-&gt;\u9879\u76eeRun/Debug\u914d\u7f6e"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#openocdcfg","text":"\u7b14\u8005\u4f7f\u7528dap\uff0c\u9700\u8981\u81ea\u5df1\u624b\u5199 \"dap.cfg\" \u6ce8\u610f\u8fd9\u4e2a.cfg\u5173\u7cfb\u5230\u9879\u76ee\u7684\u6784\u7b51\u914d\u7f6e\uff0c\u4e0d\u5199\u5165\u8fd9\u4e2a\u6587\u4ef6cmake\u662fbuild\u4e0d\u51fa\u7684 . \u8be6\u89c1ref interface \u6587\u4ef6\u5939\u5b58\u50a8\u4e86\u5404\u79cd\u8c03\u8bd5\u5668\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5305\u62ec cmsis-dap\u3001stlink-v2 \u7b49\u3002 target \u6587\u4ef6\u5939\u5219\u5b58\u50a8\u4e86\u5404\u79cd\u82af\u7247\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982 stm32f1x.cfg \u5c31\u5bf9\u5e94\u7740 STM32F1 \u7cfb\u5217\u3002\u6b63\u70b9\u539f\u5b50\u3001\u91ce\u706b\u7b49\u56fd\u5185\u4f01\u4e1a\u51fa\u54c1\u7684\u5f00\u53d1\u677f\u4e0d\u5c5e\u4e8e\u5b98\u65b9\u5f00\u53d1\u677f\uff0c\u81ea\u7136\u5728 board \u6587\u4ef6\u5939\u4e2d\u4e0d\u4f1a\u6709\u4ed6\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6839\u636e\u81ea\u5df1\u4f7f\u7528\u7684\u8c03\u8bd5\u5668\u548c\u82af\u7247\uff0c\u5199\u81ea\u5df1\u7684\u914d\u7f6e\u6587\u4ef6\u3002 # choose st-link/j-link/dap-link etc. adapter driver cmsis-dap cmsis_dap_backend hid transport select swd # 0x10000 = 64K Flash Size set FLASH_SIZE 0x160000 //\u89c6\u5f00\u53d1\u677f\u7247\u5185flash\u8d44\u6e90\u800c\u5b9a source [find target/stm32f4x.cfg] # download speed = 1MHz adapter speed 1000 //","title":"openOCD\u4e2d\u201c.cfg\u201d\u7684\u914d\u7f6e"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#include-stdc","text":"\u5982\u679c\u4f7f\u7528\u7a1a\u6656\u7684MingGW32\uff0c\u9700\u8981\u914d\u7f6e\u8fd9\u4e9b\uff0cCLION\u5185\u7f6e\u7684MINGW64\u4e0d\u7528 \u5c06main\u6587\u4ef6\u6539\u4e3acpp\u540e\u7f00\uff0c\u5728cmakelist\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff1a #include\u76ee\u5f55 include_directories(Core/Inc Drivers/STM32F4xx_HAL_Driver/Inc Drivers/STM32F4xx_HAL_Driver/Inc/Legacy Drivers/CMSIS/Device/ST/STM32F4xx/Include Drivers/CMSIS/Include D:/CubeMX/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include) \u6dfb\u52a0\u4e0aarmgcc\u7684include\u76ee\u5f55 /gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include \u5173\u4e8e\u672ccmakelist\u5404\u6307\u4ee4\u7684\u8bb2\u89e3\uff0c\u53ef\u53c2\u8003\u5b66\u957f\u89c6\u9891\uff1a [ SWJTU-G308] CLion \u914d\u7f6e\u5d4c\u5165\u5f0f\u5f00\u53d1~_\u54d4\u54e9\u54d4\u54e9_bilibili","title":"include stdc++"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#printf","text":"\u53c2\u89c1\u7a1a\u6656\u6587\u7ae0\uff0c\u7b14\u8005\u89c9\u5f97\u8fd8\u633a\u9ebb\u70e6\u7684\uff0c\u9042\u7f62\uff0c~~\u51d1\u5408\u7528HAL\u5e93\u5427~~ \u7b14\u8005\u9009\u62e9\u81ea\u5df1\u642d\u5efa\u4e00\u5957\u57fa\u4e8e\u6cdb\u578b\u7684LOG\u6846\u67b6\u3002","title":"printf\u91cd\u5b9a\u5411"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#program","text":"\u5982\u4e0b\u53ef\u4ee5\u5f00\u59cb\u4f18\u96c5\u5730\u4f7f\u7528c++\u5f00\u53d1 void test() { std::vector<std::string> vec={\"Hello embedded\\n\",\"Hello clion\\n\",\"Hello c++17\\n\",\"Hello std::vector,string,and object!\"}; for( auto& it:vec) { HAL_UART_Transmit(&huart5,it.c_str(),it.size(),300); } } \u84dd\u7259\u4e32\u53e3\u4fe1\u606f\uff1a \u540e\uff1a\u7b14\u8005\u6709\u6b21\u548c\u8001\u5e08\u804a\u5929\u65f6\uff0c\u5410\u69fd\u5230arduino uno \u5c4f\u853d\u592a\u591a\u5e95\u5c42\u7ec6\u8282\uff0c\u5185\u6838\u5982\u4e2d\u65ad\u7531\u592a\u8fc7\u7b80\u964b\uff0c\u505a\u8bfe\u8bbe\u65f6\u8e29\u5751\u4e0d\u65ad\u3002 \u8001\u5e08\u8bf4\u5982\u679c\u80fd\u752851\u5b9e\u73b0\u4e5f\u662f\u63a5\u53d7\u7684\u3002 \u7b14\u8005\u7981\u4e0d\u4f4f\u5e7d\u5e7d\u5730\u5410\u69fd\u201c\u611f\u89c951\uff0c...\u6709\u70b9\u5200\u8015\u706b\u79cd\u554a\u3002\u3002\u201d \u5982\u4f55\u5e73\u8861\u5e95\u5c42\u548c\u62bd\u8c61\u5462\uff0c\u5728\u5355\u7247\u673a\u5b66\u4e60\u4e2d\u7b14\u8005\u6162\u6162\u5b66\u4f1a\u4e86\u7ffbdatasheet\u3002\u5c01\u88c5\u5982Arduino\uff0c\u8e29\u5751\u540e\u53ef\u4ee5\u7ffbdatasheet\u627e\u5230Solution\u3002\u7b80\u964b\u598251\uff0c\u7b14\u8005\u5bf9\u7740\u5200\u8015\u706b\u79cd\u7684keilIDE\u548cC89\u7684\u8bed\u8a00\u6807\u51c6\uff0c\u59d4\u5b9e\u662f\u6ca1\u6709\u529b\u6c14\u5728\u5bc4\u5b58\u5668\u4e0a\u5200\u8015\u706b\u79cd \u4ece\u6c47\u7f16\u5230c/c++\u5230java c#\u5230python matlab\u3002\u7b14\u8005\u8ba4\u4e3astdc++ \u662f\u6211\u559c\u6b22\u7684\u65b9\u5f0f\u3002\u5728\u719f\u6089\u5e95\u5c42\u5230\u5bc4\u5b58\u5668\u548c\u6c47\u7f16\u7684\u524d\u63d0\u4e0b\uff0c\u7b14\u8005\u5f88\u4e50\u610f\u7528HAL\u5e93\uff0c\u7528\u5bf9\u8c61\uff0c\u7528stl\u53bb\u5b8c\u6210\u4efb\u52a1\u3002 \u73b0\u4ee3\u5d4c\u5165\u5f0f\u8bbe\u5907\u7684\u5e94\u7528\u573a\u666f\u90fd\u843d\u5b9e\u5230\u6df1\u5ea6\u5b66\u4e60\uff0c\u795e\u7ecf\u7f51\u7edc\uff0ccv\u7684\u90e8\u7f72\u4e0a\u4e86\uff0c\u5728\u5927\u5bb9\u91cf\u8bbe\u5907\u4e0a\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u53ef\u4ee5\u62e5\u62b1\u73b0\u4ee3IDE\u548c\u7f16\u7a0b\u8bed\u8a00\u5462\uff1f\u5173\u4e8e\u8fd0\u884c\u6548\u7387\uff0c\u7b14\u8005\u53ea\u5728\u5d4c\u5165\u5f0f\u4e2d\u542c\u95fb\u8fc7c++\u6548\u7387\u4e0d\u884c\u3002\u4f5c\u4e3a\u4e00\u4e2a\u73a9\u7968\u7684\u5927\u5b66\u751f\uff0c\u6211\u53ef\u4ee5\u53e3\u55e8\u4e00\u53e5embedded C\u8fc7\u65f6\u4e86\u3002","title":"Program"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#debug","text":"Reference : OpenOCD support | CLion Documentation (jetbrains.com) \u542f\u52a8debug\u540e\uff0c\u5185\u6838\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c\u8bb0\u5f97\u70b9\u51fb\u5de5\u5177\u680f\u4e0a\u7684\u590d\u4f4d\uff0c\u4f7fPC\u8df3\u8f6c\u5230Reset_Handler\u4e0a \uff08\u8be6\u89c1\u672c\u9879\u76ee\u5185\u6838\u672d\u8bb0\uff09 Reference: STM32\u7acb\u65b9\u4f53MX\u9879\u76ee |CLion \u6587\u6863 (jetbrains.com)","title":"Debug"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#_3","text":"","title":"\u65b0\u5efa\u9879\u76ee\u6b65\u9aa4"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#1clionstm32","text":"","title":"1.CLion\u65b0\u5efastm32\u5de5\u7a0b"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#2idecubemx","text":"","title":"2.\u6309\u7167ide\u63d0\u793a\u6253\u5f00cubemx\u914d\u7f6e\u521d\u59cb\u5316\u4ee3\u7801"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#3clioncfg","text":"","title":"3.\u56de\u5230clion\uff0c\u4e3a\u9879\u76ee\u6dfb\u52a0.cfg\u6587\u4ef6\uff0c\u5426\u5219\u5c06\u6ca1\u6709\u6784\u5efa\u914d\u7f6e\uff01\uff01\uff01"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#3openocd","text":"","title":"3.\u8fd0\u884c\u914d\u7f6e\u4e2d\u6dfb\u52a0\"Openocd\u8fd0\u884c\u5e76\u4e0b\u8f7d\"\uff0c\u5e76\u9009\u4e2d\u9762\u677f\u914d\u7f6e\u6587\u4ef6"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#4cmakelist","text":"","title":"4.\u914d\u7f6ecmakelist\u6587\u4ef6\uff1a"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#-g0include","text":"\u4e0d\u5173\uff0c\u4e5f\u884c\uff0c\u61c2\u7f16\u8bd1\u539f\u7406\u7684\u8bdd\u3002","title":"\u5173\u95ed\u4f18\u5316(-g0)\uff0c\u6dfb\u52a0include\u8def\u5f84\uff1a"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#5programingcmakelistfileinclude_dir","text":"","title":"5.Programing\uff0c\u914d\u7f6ecmakelist\u7684file\uff0cinclude_dir"},{"location":"%E5%9F%BA%E4%BA%8ECLion%E7%9A%84STM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#6debugsvd","text":"\u5173\u4e8esvd\u6587\u4ef6\u7684\u610f\u4e49\uff0c\u8be6\u89c1\u672c\u9879\u76eeCortexM\u5185\u6838\u672d\u8bb0 @ref \uff1asvd2rust\uff1aPAC(\u5916\u8bbe\u8bbf\u95ee\u5c42) Rust\u5d4c\u5165\u5f0f\u5f00\u53d1\u5165\u95e8(02)--Rust\u5d4c\u5165\u5f0f\u793e\u533a\u751f\u6001\u6982\u89c8_\u54d4\u54e9\u54d4\u54e9_bilibili \u5bf9\u5e94\u82af\u7247\u7684svd\u6587\u4ef6\u5728keil\u4e2d\u80fd\u627e\u5230\uff0c\u7528evething\u641c\u7d22\u5373\u53ef","title":"6.debug\uff0c\u9009\u62e9svd\u6587\u4ef6\u4ece\u800c\u76d1\u89c6\u5916\u8bbe"},{"location":"%E5%9F%BA%E4%BA%8EEIDE_vscode%E7%9A%84%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","text":"EIDE\u7684\u73af\u5883\u3001\u6587\u6863\u53ca\u5176\u53cb\u597d\u3002 \u8fd9\u662f\u4ec0\u4e48\uff1f | Embedded IDE For VSCode (em-ide.com) \u4e14\u63d2\u4ef6\u81ea\u52a8\u6346\u7ed1\u5f88\u591a\u4f7f\u5b9e\u7528\u5de5\u5177\u94fe\uff0c\u53ef\u79f0\u5f00\u7bb1\u5373\u7528\u3002 \u5bf9\u4e8eCMSIS\u7684MDK\u5de5\u7a0b\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u662f\u6bd4mdk\u66f4\u597d\u7684\u96c6\u6210\u5f00\u53d1\u65b9\u6848\u3002","title":"-\u57fa\u4e8eEIDE\u7684\u5f00\u53d1\u73af\u5883\u642d\u5efa"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/","text":"\u903b\u8f91\u95e8 \u903b\u8f91\u7535\u5e73 \u95e8\u7684\u76f4\u6d41\u7535\u538b\u4f20\u8f93\u7279\u6027 \u6570\u5b57\u903b\u8f91\u7535\u5e73 cmos\u903b\u8f91 CMOS-\u975e\u95e8\uff08\u53cd\u76f8\u5668\uff09 CMOS-\u4e0e\u975e\u95e8 cmos\u4e0e\u975e\u95e8\u4e0e\u5fb7\u6469\u6839\u6027\u8d28 \u4efb\u610f\u903b\u8f91\u96f6\u5bfc\u901apmos\uff0c\u8f93\u51favdd cmos\u6216\u975e\u95e8 \u4efb\u610f\u903b\u8f911\u5bfc\u901anmos\uff0c\u8f93\u51favss \u4e09\u6001\u8f93\u51fa\u95e8 \u7c7bnmos\u903b\u8f91 \u6f0f\u5373\u5f00\u8defOD\uff08\u4e0b\u62c9nmos\u7684\u6f0f\u7ea7\u5f00\u8def\uff09\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528pmos\u5f31\u4e0a\u62c9\u3002\u5728\u5de5\u827a\u4e0a\uff0c\u4f7f\u5f97pmos\u7684\u5bfc\u901a\u7535\u963b\u8fdc\u8fdc\u5927\u4e8enmos\uff0c\u540c\u65f6pmos\u7a7a\u7a74\u7684\u8fc1\u79fb\u901f\u5ea6\u8fdc\u6162\u4e0enmos\uff0cnmos\u53ef\u987a\u5229\u5b8c\u6210\u4e0b\u62c9\u3002 nmos\u6d6e\u7a7a\u65f6\uff0c\u6f0f\u7535\u6d41\u7ea7\u4f4e\uff0cpmos\u5de5\u4f5c\u5728\u53ef\u53d8\u7535\u963b\u533a\uff0c\u9759\u6001\u529f\u8017\u6781\u4f4e\u3002 nmos\u5bfc\u901a\u65f6\uff0c\u5b58\u5728\u4e00\u5b9a\u635f\u8017\uff0c\u4f46pmos\u5de5\u4f5c\u5728\u6052\u6d41\u533a\uff0c\u5bfc\u901a\u7535\u963b\u53ef\u89c2\u3002 \u7c7bnmos\u903b\u8f91\u573a\u7528\u5728\u591a\u8f93\u5165\u903b\u8f91\u95e8\u573a\u5408\uff0c \u5982\uff0c5-32\u8bd1\u7801\u5668 \uff0c\u9700\u898132\u4e2a5\u8f93\u5165\u4e0e\u975e\u95e8\uff0ccmos\u642d\u5efa\u4e3a64mos\uff0c\u7c7bnmos\u642d\u5efa\u4e3a33mos\u3002\u6743\u8861\u5229\u5f0a\uff0c\u8fd8\u662f\u53ef\u79f0\u964d\u4f4e\u4e86\u529f\u8017\u3002 pic:\u7c7bnmos\u975e\u95e8 pic:\u7c7bnmos \u5728\u591a\u8f93\u5165\u8bd1\u7801\u5668\u7684\u5e94\u7528 \uff1a\u7c7bnmos\u4e0e\u975e\uff1apmos\u5e38\u5f00\uff0c\u8f93\u5165\u5747\u4e3a1\u65f6\u4e0b\u624d\u62c9 \u2014\u2014\u5728\u8f93\u51fa\u5e38\u4e3a\u9ad8\u7535\u5e73\u65f6\u6709\u7528\u3002 \u7ec4\u5408\u903b\u8f91 \u65f6\u5e8f\u903b\u8f91 \u9501\u5b58\u5668\u4e0e\u89e6\u53d1\u5668 \u903b\u8f91\u95e8\u63a7 \u4e0e\u95e8\u63a7\uff1a \u95e8\u63a7\u4e3a0\u65f6\uff0c\u8f93\u51fa\u6052\u96f6\uff1b\u95e8\u63a7\u4e3a1\u65f6\uff0c\u8f93\u51fa\u4e0e\u8f93\u5165\u540c\u76f8\u3002 \u4e0e\u975e\u95e8\u63a7\uff1a\u95e8\u63a7\u4e3a0\u65f6\uff0c\u8f93\u51fa\u60521\uff1b\u95e8\u63a7\u4e3a\u96f6\u65f6\uff0c\u8f93\u51fa\u4e0e\u8f93\u5165\u53cd\u76f8 \u6216\u975e\u95e8\u63a7\uff1a\u95e8\u63a7\u4e3a1\u65f6\uff0c\u8f93\u51fa\u6052\u96f6\uff1b\u95e8\u63a7\u4e3a1\u65f6\uff0c\u8f93\u51fa\u4e0e\u8f93\u5165\u53cd\u76f8\u3002 SR\u9501\u5b58\u5668 pic\uff1a\u6216\u975e\u95e8 SR\u9501\u5b58\u5668\uff1a S\u3001R\u662fNOR\u7684\u95e8\u63a7\u4fe1\u53f7\uff1a\u5176\u4e3a1\u65f6\uff0cY\u6052\u4e3a\u96f6\u3002 pic:\u4e0e\u975e\u95e8 SR\u9501\u5b58\u5668 S\u3001R\u662f\u524d\u7ea7NAND\u7684\u4f20\u8f93\u4fe1\u53f7\uff0c\u95e8\u63a7E\u4e3a1\u65f6\uff0cY\u4e3a\u4fe1\u53f7\u7684\u53cd\u76f8\u3002 Q4\u3001Q3\u662fNAND\u7684\u95e8\u63a7\u4fe1\u53f7\uff1a\u5176\u4e3a0\u65f6\uff0cY\u6052\u4e3a1\u3002 D\u9501\u5b58/\u89e6\u53d1\u5668 pic D\u9501\u5b58\u5668 \u57fa\u4e8eSR\uff0c\u5e26\u65f6\u949f\u4f7f\u80fd pic:\u57fa\u4e8e\u4e3b\u4ece\u9501\u5b58\u7ed3\u6784\u7684D\u89e6\u53d1\u5668 JK\u89e6\u53d1\u5668 j k q 0 0 Q 1 0 !Q + Q = 1 0 1 0 + 0 = 0 1 1 !Q \u4f20\u8f93\u95e8\u63a7 \u540c\u6b65\u65f6\u5e8f\u5206\u6790 pic \u5efa\u7acb\u65f6\u95f4\u4e0e\u4fdd\u6301\u65f6\u95f4\u8981\u6c42 pic \u5f02\u6b65\u7535\u8def\u7ade\u4e89\u5b9e\u4f8b \u65f6\u5e8f\u7535\u8def\u4e0e\u72b6\u6001\u673a\u5668 \u4ee5\u4e0b\u56db\u4e2a\u5411\u91cf\u63cf\u8ff0\u65f6\u5e8f\u7535\u8def\uff1a $$ &\u8f93\u5165\u4fe1\u53f7I\\ &\u6fc0\u52b1\u4fe1\u53f7E\uff0c\u4e3a\u50a8\u5b58\u7535\u8def\u7684\u8f93\u5165\u4fe1\u53f7\\ &\u72b6\u6001\u53d8\u91cfS\\ &\u8f93\u51fa\u4fe1\u53f7O\\ $$ \u4ee5\u4e0b\u7ec4\u5408\u903b\u8f91\u65b9\u7a0b\u7ec4\u63cf\u8ff0\u65f6\u5e8f\u7535\u8def\u884c\u4e3a\uff1a \u6fc0\u52b1\u65b9\u7a0b $E=f(I,S)$ \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7ec4$S^{n+1} = g(E,s^n)$ \u8f93\u51fa\u65b9\u7a0b\u7ec4$O=h(I,S)$ \u6ce8\u610f\u5230\uff0cE\u662f\u53ef\u88ab\u7ea6\u53bb\u7684\uff1a $S^{n+1}=F(I,S^n)$ $O = H(I , S)$ \u6fc0\u52b1\u4fe1\u53f7E\u662f\u65f6\u5e8f\u5668\u4ef6\u3001\u5982\u89e6\u53d1\u5668\u7684\u7ec4\u5408\u903b\u8f91\u8f93\u5165\u3002 \u72b6\u6001\u8f6c\u79fb\u8868 \u72b6\u6001\u8f6c\u79fb\u56fe","title":"-\u6570\u5b57\u903b\u8f91"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_1","text":"","title":"\u903b\u8f91\u95e8"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_2","text":"\u95e8\u7684\u76f4\u6d41\u7535\u538b\u4f20\u8f93\u7279\u6027 \u6570\u5b57\u903b\u8f91\u7535\u5e73","title":"\u903b\u8f91\u7535\u5e73"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#cmos","text":"CMOS-\u975e\u95e8\uff08\u53cd\u76f8\u5668\uff09 CMOS-\u4e0e\u975e\u95e8 cmos\u4e0e\u975e\u95e8\u4e0e\u5fb7\u6469\u6839\u6027\u8d28 \u4efb\u610f\u903b\u8f91\u96f6\u5bfc\u901apmos\uff0c\u8f93\u51favdd cmos\u6216\u975e\u95e8 \u4efb\u610f\u903b\u8f911\u5bfc\u901anmos\uff0c\u8f93\u51favss \u4e09\u6001\u8f93\u51fa\u95e8","title":"cmos\u903b\u8f91"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#nmos","text":"\u6f0f\u5373\u5f00\u8defOD\uff08\u4e0b\u62c9nmos\u7684\u6f0f\u7ea7\u5f00\u8def\uff09\u7684\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528pmos\u5f31\u4e0a\u62c9\u3002\u5728\u5de5\u827a\u4e0a\uff0c\u4f7f\u5f97pmos\u7684\u5bfc\u901a\u7535\u963b\u8fdc\u8fdc\u5927\u4e8enmos\uff0c\u540c\u65f6pmos\u7a7a\u7a74\u7684\u8fc1\u79fb\u901f\u5ea6\u8fdc\u6162\u4e0enmos\uff0cnmos\u53ef\u987a\u5229\u5b8c\u6210\u4e0b\u62c9\u3002 nmos\u6d6e\u7a7a\u65f6\uff0c\u6f0f\u7535\u6d41\u7ea7\u4f4e\uff0cpmos\u5de5\u4f5c\u5728\u53ef\u53d8\u7535\u963b\u533a\uff0c\u9759\u6001\u529f\u8017\u6781\u4f4e\u3002 nmos\u5bfc\u901a\u65f6\uff0c\u5b58\u5728\u4e00\u5b9a\u635f\u8017\uff0c\u4f46pmos\u5de5\u4f5c\u5728\u6052\u6d41\u533a\uff0c\u5bfc\u901a\u7535\u963b\u53ef\u89c2\u3002 \u7c7bnmos\u903b\u8f91\u573a\u7528\u5728\u591a\u8f93\u5165\u903b\u8f91\u95e8\u573a\u5408\uff0c \u5982\uff0c5-32\u8bd1\u7801\u5668 \uff0c\u9700\u898132\u4e2a5\u8f93\u5165\u4e0e\u975e\u95e8\uff0ccmos\u642d\u5efa\u4e3a64mos\uff0c\u7c7bnmos\u642d\u5efa\u4e3a33mos\u3002\u6743\u8861\u5229\u5f0a\uff0c\u8fd8\u662f\u53ef\u79f0\u964d\u4f4e\u4e86\u529f\u8017\u3002 pic:\u7c7bnmos\u975e\u95e8 pic:\u7c7bnmos \u5728\u591a\u8f93\u5165\u8bd1\u7801\u5668\u7684\u5e94\u7528 \uff1a\u7c7bnmos\u4e0e\u975e\uff1apmos\u5e38\u5f00\uff0c\u8f93\u5165\u5747\u4e3a1\u65f6\u4e0b\u624d\u62c9 \u2014\u2014\u5728\u8f93\u51fa\u5e38\u4e3a\u9ad8\u7535\u5e73\u65f6\u6709\u7528\u3002","title":"\u7c7bnmos\u903b\u8f91"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_3","text":"","title":"\u7ec4\u5408\u903b\u8f91"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_4","text":"","title":"\u65f6\u5e8f\u903b\u8f91"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_5","text":"","title":"\u9501\u5b58\u5668\u4e0e\u89e6\u53d1\u5668"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_6","text":"\u4e0e\u95e8\u63a7\uff1a \u95e8\u63a7\u4e3a0\u65f6\uff0c\u8f93\u51fa\u6052\u96f6\uff1b\u95e8\u63a7\u4e3a1\u65f6\uff0c\u8f93\u51fa\u4e0e\u8f93\u5165\u540c\u76f8\u3002 \u4e0e\u975e\u95e8\u63a7\uff1a\u95e8\u63a7\u4e3a0\u65f6\uff0c\u8f93\u51fa\u60521\uff1b\u95e8\u63a7\u4e3a\u96f6\u65f6\uff0c\u8f93\u51fa\u4e0e\u8f93\u5165\u53cd\u76f8 \u6216\u975e\u95e8\u63a7\uff1a\u95e8\u63a7\u4e3a1\u65f6\uff0c\u8f93\u51fa\u6052\u96f6\uff1b\u95e8\u63a7\u4e3a1\u65f6\uff0c\u8f93\u51fa\u4e0e\u8f93\u5165\u53cd\u76f8\u3002","title":"\u903b\u8f91\u95e8\u63a7"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#sr","text":"pic\uff1a\u6216\u975e\u95e8 SR\u9501\u5b58\u5668\uff1a S\u3001R\u662fNOR\u7684\u95e8\u63a7\u4fe1\u53f7\uff1a\u5176\u4e3a1\u65f6\uff0cY\u6052\u4e3a\u96f6\u3002 pic:\u4e0e\u975e\u95e8 SR\u9501\u5b58\u5668 S\u3001R\u662f\u524d\u7ea7NAND\u7684\u4f20\u8f93\u4fe1\u53f7\uff0c\u95e8\u63a7E\u4e3a1\u65f6\uff0cY\u4e3a\u4fe1\u53f7\u7684\u53cd\u76f8\u3002 Q4\u3001Q3\u662fNAND\u7684\u95e8\u63a7\u4fe1\u53f7\uff1a\u5176\u4e3a0\u65f6\uff0cY\u6052\u4e3a1\u3002","title":"SR\u9501\u5b58\u5668"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#d","text":"pic D\u9501\u5b58\u5668 \u57fa\u4e8eSR\uff0c\u5e26\u65f6\u949f\u4f7f\u80fd pic:\u57fa\u4e8e\u4e3b\u4ece\u9501\u5b58\u7ed3\u6784\u7684D\u89e6\u53d1\u5668","title":"D\u9501\u5b58/\u89e6\u53d1\u5668"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#jk","text":"j k q 0 0 Q 1 0 !Q + Q = 1 0 1 0 + 0 = 0 1 1 !Q","title":"JK\u89e6\u53d1\u5668"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_7","text":"","title":"\u4f20\u8f93\u95e8\u63a7"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_8","text":"pic \u5efa\u7acb\u65f6\u95f4\u4e0e\u4fdd\u6301\u65f6\u95f4\u8981\u6c42 pic \u5f02\u6b65\u7535\u8def\u7ade\u4e89\u5b9e\u4f8b","title":"\u540c\u6b65\u65f6\u5e8f\u5206\u6790"},{"location":"%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/#_9","text":"\u4ee5\u4e0b\u56db\u4e2a\u5411\u91cf\u63cf\u8ff0\u65f6\u5e8f\u7535\u8def\uff1a $$ &\u8f93\u5165\u4fe1\u53f7I\\ &\u6fc0\u52b1\u4fe1\u53f7E\uff0c\u4e3a\u50a8\u5b58\u7535\u8def\u7684\u8f93\u5165\u4fe1\u53f7\\ &\u72b6\u6001\u53d8\u91cfS\\ &\u8f93\u51fa\u4fe1\u53f7O\\ $$ \u4ee5\u4e0b\u7ec4\u5408\u903b\u8f91\u65b9\u7a0b\u7ec4\u63cf\u8ff0\u65f6\u5e8f\u7535\u8def\u884c\u4e3a\uff1a \u6fc0\u52b1\u65b9\u7a0b $E=f(I,S)$ \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u7ec4$S^{n+1} = g(E,s^n)$ \u8f93\u51fa\u65b9\u7a0b\u7ec4$O=h(I,S)$ \u6ce8\u610f\u5230\uff0cE\u662f\u53ef\u88ab\u7ea6\u53bb\u7684\uff1a $S^{n+1}=F(I,S^n)$ $O = H(I , S)$ \u6fc0\u52b1\u4fe1\u53f7E\u662f\u65f6\u5e8f\u5668\u4ef6\u3001\u5982\u89e6\u53d1\u5668\u7684\u7ec4\u5408\u903b\u8f91\u8f93\u5165\u3002 \u72b6\u6001\u8f6c\u79fb\u8868 \u72b6\u6001\u8f6c\u79fb\u56fe","title":"\u65f6\u5e8f\u7535\u8def\u4e0e\u72b6\u6001\u673a\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","text":"\u7b97\u672f\u903b\u8f91 \u4e00\u4f4d\u5168\u52a0\u5668\uff1a $ S = A \\oplus B \\oplus C$ $C_{out}=AB + C_{in}(A+B)$ CLA\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff1a $Gi=AiBi$ $Pi=Ai + Bi$ \u9635\u5217\u4e58\u6cd5\u5668\uff1a \u9635\u5217\u9664\u6cd5\u5668 \u626b\u63cf\u94fe\u8c03\u8bd5\u6280\u672f \u5b58\u50a8\u5668 bit\u9635\u5217\u6a21\u578b \u5b58\u50a8\u5668\u7aef\u53e3 DRAM SRAM \u5bc4\u5b58\u5668\u6587\u4ef6 LUT LE","title":"-\u4f53\u7cfb\u7ed3\u6784"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_1","text":"","title":"\u7b97\u672f\u903b\u8f91"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_2","text":"$ S = A \\oplus B \\oplus C$ $C_{out}=AB + C_{in}(A+B)$","title":"\u4e00\u4f4d\u5168\u52a0\u5668\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#cla","text":"$Gi=AiBi$ $Pi=Ai + Bi$","title":"CLA\u8d85\u524d\u8fdb\u4f4d\u52a0\u6cd5\u5668\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_3","text":"","title":"\u9635\u5217\u4e58\u6cd5\u5668\uff1a"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_4","text":"","title":"\u9635\u5217\u9664\u6cd5\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_5","text":"","title":"\u626b\u63cf\u94fe\u8c03\u8bd5\u6280\u672f"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_6","text":"","title":"\u5b58\u50a8\u5668"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#bit","text":"","title":"bit\u9635\u5217\u6a21\u578b"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_7","text":"","title":"\u5b58\u50a8\u5668\u7aef\u53e3"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#dram","text":"","title":"DRAM"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#sram","text":"","title":"SRAM"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#_8","text":"","title":"\u5bc4\u5b58\u5668\u6587\u4ef6"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#lut","text":"","title":"LUT"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/#le","text":"","title":"LE"}]}